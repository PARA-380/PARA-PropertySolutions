"""
File: Cont_Property.py
Name: Adrian Carreno, Ali Maamoun
Date: 04/23/24
Description: Controller for Property module
Purposes: Controller Class for handling tasks related to properties,
adding new properties to the database, and reading the databse for properties
"""

from System import Property, db

class Cont_Property:
    def __init__(self, accID : int = None):
        """Initializes a controller and connects to the database immediately

        Args:
            accID (int, optional): account ID to read their properties. Defaults to None.
        """
        self.mainAccountID = accID
        self.Properties = self.getProperties()
        self.property_IDs = { #[property_number] : property_ID
            }


    def createProperty(self, property : Property = Property()) -> int:
        """Creates a new property into the database and updates its records

        Args:
            property (Property, optional): empty Property Object. Defaults to Property().

        Returns:
            int: ID generated by database
        """
        new_id = db.addToProperty(accID=self.mainAccountID, property=property)
        self.Properties = self.getProperties()
        return new_id
    
    def deleteProperty(self, prop_number : int):
        """Removes a property fromthe database and updates its records

        Args:
            prop_number (int): Database ID
        """
        prop_id = self.property_IDs.pop(prop_number)
        db.deleteProperty(prop_id)
        self.Properties = self.getProperties()


    def getProperties(self) -> list[Property]:
        """Updates its records of properties

        Returns:
            list[Property]:updated list of properties
        """
        return db.readProperty(self.mainAccountID)

    def addPropertyID(self,key,ID):
        """Adds local ID to its translation table of GUI numbers
            Used in PropertyMain
        Args:
            key (_type_): GUI property number
            ID (_type_): Database Property Number
        """
        self.property_IDs[key] = ID
    
    def getPropertyID(self, key):
        """gets the propertyID in the database by using a GUI property number

        Args:
            key (_type_): GUI Property Number 

        Returns:
            _type_: Database Property Number
        """
        return self.property_IDs[key]


    #TODO: setters and getters for Address and other attributes
        #get a property from property_IDs and return a requested value
        #get_property_Address should search the list find the property by ID then return its address.
        #note: might only be able to give a property_number key... so keep in mind when translating.
        #note: you can look up by property number in dictionary if given a key.

    #TODO: Reading Database and putting Address in GUI

    def find_property_by_id(self, prop_id):
        """Searches the list for a property by matching its database ID

        Args:
            prop_id (_type_): database property id

        Returns:
            _type_: Property object
            None if not found
        """
        for property in self.Properties:
            if property.get_property_id() == prop_id:
                return property
        print("Property not found")
        return None

    def get_property_address(self, prop_id: int):
        """returns the property object's address

        Args:
            prop_id (int): database property ID

        Returns:
            _type_: address str
        """
        return self.find_property_by_id(prop_id).get_address()

    def update_address(self, address: str, prop_id: int):
        """Updates the Database then its own records

        Args:
            address (str): address to update to
            prop_id (int): database property ID
        """
        self.Properties = self.getProperties()
        prop = self.find_property_by_id(prop_id)
        prop.set_address(address)
        db.updateProperty(prop)

    def update_link_images(self, link_images: str, prop_id: int):
        """Updates the Database then its own records

        Args:
            link_images (str): images link to update to 
            prop_id (int): database property ID
        """
        self.Properties = self.getProperties()
        prop = self.find_property_by_id(prop_id)
        prop.set_link_images(link_images)
        db.updateProperty(prop)

    def get_property_link_images(self, prop_id: int):
        """gets the property's link images

        Args:
            prop_id (int): database property ID

        Returns:
            _type_: the link to images
        """
        return self.find_property_by_id(prop_id).get_link_images()
    
